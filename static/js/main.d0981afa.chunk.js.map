{"version":3,"sources":["components/Navbar/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","score","topScore","Card","concat","animation","type","alt","name","src","image","onClick","clickPicture","id","footerCss","background","color","height","bottom","App","state","imagesList","clickedImageIds","message","handleClickPicture","shuffledArray","_this","handleShuffleArray","setState","includes","console","log","i","length","j","Math","floor","random","_ref","_this2","this","components_Navbar","map","images","Cards","key","animate","style","href","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k9BAeeA,SAZA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,6BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gCAAd,UAAqDJ,EAAMK,MAA3D,iBAAgFL,EAAMM,cCKnFC,SAXF,SAACP,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,uBAAAI,OAA0BR,EAAMS,UAAW,kBAAmB,IAC5EC,KAAK,SACLC,IAAKX,EAAMY,KACXC,IAAKb,EAAMc,MACXC,QAAS,kBAAMf,EAAMgB,aAAahB,EAAMiB,gBCJ5CC,EAAY,CACdC,WAAa,UACbC,MAAO,QACPC,OAAQ,OACRC,OAAQ,KA4GKC,6MAxGbC,MAAQ,CAENC,aACAC,gBAAiB,GACjBrB,MAAO,EACPC,SAAU,EACVqB,QAAS,2BACTlB,UAAW,oBAiBbmB,mBAAqB,SAACX,GACpB,IAAIY,EAAgBC,EAAKC,mBAAmBN,GAG5C,GAFAK,EAAKE,SAAS,CAAEP,WAAYI,IAExBC,EAAKN,MAAME,gBAAgBO,SAAShB,GAGtC,OAFAiB,QAAQC,IAAI,gCACZL,EAAKE,SAAS,CAAEN,gBAAiB,GAAIrB,MAAO,EAAGsB,QAAS,8BAIxDG,EAAKE,SAAS,CACZN,gBAAiBI,EAAKN,MAAME,gBAAgBlB,OAAO,CAACS,IACpDZ,MAAOyB,EAAKN,MAAMnB,MAAQ,EAC1BsB,QAAS,6BAEXO,QAAQC,IAAI,QAASL,EAAKN,MAAMnB,OAChC6B,QAAQC,IAAI,WAAYL,EAAKN,MAAMlB,UAE/BwB,EAAKN,MAAMnB,MAAQ,IAAM,IAE3ByB,EAAKC,mBAAmBN,GACxBK,EAAKE,SAAS,CAAEP,WAAYI,IAG5BC,EAAKE,SAAS,CACZ1B,SAAUwB,EAAKN,MAAMnB,MAAQ,EAC7BsB,QAAS,0DAETtB,MAAO,EACPqB,gBAAiB,MAIZI,EAAKN,MAAMnB,MAAQ,EAAIyB,EAAKN,MAAMlB,UACzCwB,EAAKE,SAAS,CAAE1B,SAAUwB,EAAKN,MAAMnB,MAAQ,OAKnD0B,mBAAqB,SAAAN,GACnB,IAAK,IAAIW,EAAIX,EAAWY,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADMM,EAEb,CAACjB,EAAWa,GAAIb,EAAWW,IAA3DX,EAAWW,GAFkCM,EAAA,GAE9BjB,EAAWa,GAFmBI,EAAA,GAIhD,OAAOjB,2EAIA,IAAAkB,EAAAC,KACP,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0C,EAAD,CACExC,MAAOuC,KAAKpB,MAAMnB,MAClBC,SAAUsC,KAAKpB,MAAMlB,SACrBqB,QAASiB,KAAKpB,MAAMG,UAEtB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZwC,KAAKpB,MAAMC,WAAWqB,IAAI,SAAAC,GAAM,OAC/B9C,EAAAC,EAAAC,cAAC6C,EAAD,CACE/B,GAAI8B,EAAO9B,GACXgC,IAAKF,EAAO9B,GACZL,KAAMmC,EAAOnC,KACbE,MAAOiC,EAAOjC,MACdE,aAAc2B,EAAKf,mBACnBsB,SAAUP,EAAKnB,MAAMnB,OAASsC,EAAKnB,MAAMlB,cAK/CL,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAe+C,MAASjC,GAC1CjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAChBH,EAAAC,EAAAC,cAAA,KAAGiD,KAAK,0CAA0ChD,UAAU,aAAaiD,OAAO,UAAhF,6BAhGMC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0981afa.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst Navbar = (props) => {\n    return (\n        <div>\n            <nav className=\"navbar sticky-top navbar-dark\">\n            <h2 className=\"title col-4 text-center\">React Memory Game</h2>\n            <h4 className=\"col-4 text-center\">Click an image to begin! </h4>\n            <h2 className=\"text-light col-4 text-center\">Score: {props.score} | Top Score: {props.topScore}</h2>\n          </nav>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport './style.css';\n\nconst Card = (props) => {\n    return (\n        <img className= {`m-3 hoverbg column  ${props.animation? \"animated wobble\": \"\"}`} \n        type=\"button\" \n        alt={props.name} \n        src={props.image}  \n        onClick={() => props.clickPicture(props.id)} \n        />\n    );\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport NavBar from \"./components/Navbar\";\nimport ImagesCard from \"./components/Cards\";\nimport imagesList from \"./imagesList.json\";\n// import './App.css';\nlet footerCss = {\n  background : \"#7da64c\",\n  color: \"#fff \",\n  height: \"60px\",\n  bottom: \"0\"\n};\n\nclass App extends Component {\n  state = {\n    // Setting this.state.imagesList to the imagesList json array\n    imagesList,\n    clickedImageIds: [],\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\",\n    animation: \"animated swing\"\n  }\n\n  // handleCardClicked = (id) => {\n  //   console.log(id);\n  //   // create a new array that is a clone of the imagesList array\n  //   // loop over the new array and check if the id for each is equal to the clicked id \n  //   // if it is check is the clicked value is true or false\n  //   // if its false update it to true and add 1 to score\n  //   // check if score is greater than toScore \n  //   // if sore is greater update topScore to be score\n  //   // set state with new array where imagesList was\n  //   let newImageList = this.state.imagesList;\n  //   newImageList.forEach(element => {\n  //   });\n  // }\n\n  handleClickPicture = (id) => {\n    let shuffledArray = this.handleShuffleArray(imagesList);\n    this.setState({ imagesList: shuffledArray });\n\n    if (this.state.clickedImageIds.includes(id)) {\n      console.log('Game Over reset values ')\n      this.setState({ clickedImageIds: [], score: 0, message: 'You guessed incorrectly! ' });\n      return;\n\n    } else {\n      this.setState({\n        clickedImageIds: this.state.clickedImageIds.concat([id]),\n        score: this.state.score + 1,\n        message: 'You guessed it correctly'\n      });\n      console.log(\"Score\", this.state.score);\n      console.log(\"TopScore\", this.state.topScore);\n\n      if (this.state.score + 1 === 12) {\n        // Shuffle Array\n        this.handleShuffleArray(imagesList);\n        this.setState({ imagesList: shuffledArray });\n\n        //Reset Game\n        this.setState({\n          topScore: this.state.score + 1,\n          message: 'Congratulations!! You won click image to reset the game',\n          //Reset the Game \n          score: 0,\n          clickedImageIds: [],\n        })\n\n      }\n      else if (this.state.score + 1 > this.state.topScore) {\n        this.setState({ topScore: this.state.score + 1 });\n      }\n    }\n  }\n\n  handleShuffleArray = imagesList => {\n    for (let i = imagesList.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [imagesList[i], imagesList[j]] = [imagesList[j], imagesList[i]];\n    }\n    return imagesList;\n  }\n\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message} />\n\n        <div className=\"container-fluid\">\n          {this.state.imagesList.map(images => (\n            <ImagesCard\n              id={images.id}\n              key={images.id}\n              name={images.name}\n              image={images.image}\n              clickPicture={this.handleClickPicture}\n              animate={!this.state.score && this.state.topScore}\n            />\n          ))}\n        </div>\n\n        <footer className = \"fixed-bottom\" style = {footerCss}>\n          <center className=\"p-3\">\n            <a href=\"https://github.com/minalk24/Clicky-Game\" className=\"text-light\" target=\"_blank\" >Click for code </a>\n          </center>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}